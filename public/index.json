[{"authors":null,"categories":null,"content":"Hi! I am Martin Frigaard \u0026ndash; Data Scientist and Co-founder of Paradigm Datagroup. I provide workshops, write guides and tutorials, and build web applications for individuals and teams working with data. I have over 10 years of experience with data analysis, statistics, and research. I\u0026rsquo;m also a fully certified RStudio tidyverse trainer.\n  Download my resumé.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.martinfrigaard.io/author/martin-frigaard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/martin-frigaard/","section":"authors","summary":"Hi! I am Martin Frigaard \u0026ndash; Data Scientist and Co-founder of Paradigm Datagroup. I provide workshops, write guides and tutorials, and build web applications for individuals and teams working with data.","tags":null,"title":"Martin Frigaard","type":"authors"},{"authors":null,"categories":null,"content":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"da99cb196019cc5857b9b3e950397ca9","permalink":"https://www.martinfrigaard.io/author/%E5%90%B3%E6%81%A9%E9%81%94/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/%E5%90%B3%E6%81%A9%E9%81%94/","section":"authors","summary":"吳恩達 is a professor of artificial intelligence at the Stanford AI Lab. His research interests include distributed robotics, mobile computing and programmable matter. He leads the Robotic Neurobiology group, which develops self-reconfiguring robots, systems of self-organizing robots, and mobile sensor networks.","tags":null,"title":"吳恩達","type":"authors"},{"authors":null,"categories":null,"content":"Data Journalism The course website is here, along with the source code and syllabus.\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"53a704fd511de894c9d4cec58b3fde12","permalink":"https://www.martinfrigaard.io/courses/csuc-data-journalism/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/csuc-data-journalism/","section":"courses","summary":"Journalism 301 - Data Journalism.","tags":null,"title":"Welcome to data journalism","type":"docs"},{"authors":[],"categories":["shiny"],"content":"Namespaces This is a quick post about namespaces in shiny modules. I’ll cover how the NS() function helps organize IDs in the UI, and how these IDs are accessed in the server with moduleServer().\nKeeping track of names As you can imagine, keeping track of all the IDs (inputId/input and outputId/output) becomes difficult and time consuming. It’s also hard to anticipate which names we’ll need in the future, or the level of precision these names require. This is where modules come in handy.\nWhat is a namespace in a shiny app? “…a namespace is to an ID as a directory is to a file…” The quote above is from the NS() help files, and I’ve found it’s a great way to conceptualize what NS() is creating.\nIf we imagine creating two files with identical names (file.R and file.R) we quickly discover they can’t exist in the same directory. See what happens below when we try to create them in a directory named folder:\nfs::dir_create(\u0026quot;folder\u0026quot;) # create directory fs::file_create(\u0026quot;folder/file.R\u0026quot;) # create file 1 fs::file_create(\u0026quot;folder/file.R\u0026quot;) # create file 2 (same name) fs::dir_tree(\u0026quot;folder\u0026quot;) # check files in directory  folder/ └── file.R  We can see there is only one file.R in the folder/ directory (the second fs::file_create(\u0026quot;folder/file.R\u0026quot;) overwrote the first file.R). You’ve probably seen an error like this when trying to save two files with the same name into the same folder.\nHowever, we can have files with identical names in two different folders, but we have to reorganize the structure. Below we’ve created a parent folder (folder/) with two sub-folders (sub-folder-A/ and sub-folder-B/), where we can place each file:\nfolder/ ├── sub-folder-A/ │ └── file.R └── sub-folder-B/ └── file.R  By placing the files in sub-directories, we’ve made the path to each file unique, which makes it possible for them to have identical names. We can access these files using their unique path (not their unique name). The NS() function works in a similar way by creating a unique ‘path’ for each ID the module.\nUsing NS() Sometimes you’ll see NS() used to create a separate ns() function, which is then used to define IDs in the module (i.e. ns \u0026lt;- shiny::NS(id) then ns(\u0026quot;[name]\u0026quot;)):\ntext_example_01_UI \u0026lt;- function(id) { ns \u0026lt;- shiny::NS(id) tagList( textAreaInput(inputId = ns(\u0026quot;text_in\u0026quot;), label = \u0026quot;Text\u0026quot;), verbatimTextOutput(ns(\u0026quot;text_out\u0026quot;)) ) } text_example_01_UI(id = \u0026quot;text\u0026quot;)  Text    Other times you’ll see it written explicitly (with NS(namespace = id, id = \u0026quot;[name]\u0026quot;)).\ntext_example_02_UI \u0026lt;- function(id) { tagList( textAreaInput(inputId = NS(namespace = id, id = \u0026quot;text_in\u0026quot;), label = \u0026quot;Text\u0026quot;), verbatimTextOutput(outputId = NS(namespace = id, id = \u0026quot;text_out\u0026quot;)) ) } text_example_02_UI(id = \u0026quot;text\u0026quot;)  Text    As you can see, both methods work. This is because “if id is missing, [NS()] returns a function that expects an id string as its only argument and returns that id with the namespace prepended.”\nTo see what the unique ‘location’ for a namespaced ID looks like, we can define our namespace in a string (“text”), then create a new object from NS() (name_Spaceded()) and examine it’s contents:\n# define a namespace id \u0026lt;- \u0026quot;text\u0026quot; # create the function name_Spaceded \u0026lt;- NS(namespace = id) # view the contents name_Spaceded  ## function (id) ## { ## if (length(id) == 0) ## return(ns_prefix) ## if (length(ns_prefix) == 0) ## return(id) ## paste(ns_prefix, id, sep = ns.sep) ## } ## \u0026lt;bytecode: 0x7fbc2e66d028\u0026gt; ## \u0026lt;environment: 0x7fbc2f4dd060\u0026gt;  I was surprised by the simplicity of this function! It’s pasting two strings together: the ns_prefix (the namespace prefix) and the id.\nIf we supply an empty id…\n# empty id name_Spaceded(id = \u0026quot;\u0026quot;)  ## [1] \u0026quot;text-\u0026quot;  We can see the first id we pass is the name for the namespace. When we supply a second character string (imitating an inputId or outputId)…\n# \u0026quot;namespace\u0026quot; the id name_Spaceded(\u0026quot;text_in\u0026quot;)  ## [1] \u0026quot;text-text_in\u0026quot;  We can see this replaces what would be input$text_in–shared globally across our entire application–with input$text_in in the text module.\nModule ‘directory’ structure Just like we can’t have identical file names in the same folder, we can’t have two IDs with the same name in the same app. To get around this, we create modules by pairing NS() with moduleServer():\n  In the UI module, NS() solves this problem by isolating the IDs into a namespace, which we can access via moduleServer().\n  In the server module, the moduleServer() function includes both id and module arguments. The id will be linked to it’s complimentary UI function, and module is defined just like the standard shiny server function (function(input, output, session)). There is also a session argument, but it’s almost always set to the default value.\n  Below is an application folder-tree that mimics how IDs are contained within two module’s namespaces:\napp/ ├── module-plot/ # plot module namespace │ ├── UI-inputId=NS(namespace = id, id = \u0026quot;x_variable\u0026quot;) │ ├── UI-inputId=NS(namespace = id, id = \u0026quot;y_variable\u0026quot;) │ ├── UI-inputId=NS(namespace = id, id = \u0026quot;color_variable\u0026quot;) │ ├── UI-outputId=NS(namespace = id, id = \u0026quot;plot\u0026quot;) │ └── server-moduleServer(id = id) └── module-data/ # data module namespace ├── UI-inputId=NS(namespace = id, id = \u0026quot;x_variable\u0026quot;) ├── UI-inputId=NS(namespace = id, id = \u0026quot;y_variable\u0026quot;) ├── UI-inputId=NS(namespace = id, id = \u0026quot;color_variable\u0026quot;) ├── UI-outputId=NS(namespace = id, id = \u0026quot;table\u0026quot;) └── server-moduleServer(id = id)  Within app/, we have two modules (module-plot/ and module-data/), each with a pair of IDs (inputId/outputId). These IDs must be unique within the module’s namespace, but they no longer have to be unique within the app.\nWe use the NS() function to isolate and name the IDs in a namespace (i.e. id = \u0026quot;[name]\u0026quot;), then we access these IDs in the server with moduleServer() (which we will cover below).\nExample UI Below is an example UI function for a module with input and output functions and their IDs (input$x_variable, input$y_variable, and output$plot).\nexample_module_UI \u0026lt;- function(id) { tagList( # input selectInput( inputId = NS(namespace = id, id = \u0026quot;x_variable\u0026quot;) # ...additional arguments omitted... ), # input selectInput( inputId = NS(namespace = id, id = \u0026quot;y_variable\u0026quot;) # ...additional arguments omitted... ), # input selectInput( inputId = NS(namespace = id, id = \u0026quot;color_variable\u0026quot;) # ...additional arguments omitted... ), # output plotOutput( outputId = NS(namespace = id, id = \u0026quot;plot\u0026quot;)) ) }  Example server When we build the server component, we include a call to moduleServer(), and assume the server will have access to the same inputs and outputs defined in the UI:\nexample_module_Server \u0026lt;- function(id) { moduleServer(id = id, module = function(input, output, session) { # data reactive data \u0026lt;- reactive( select( \u0026lt;data\u0026gt;, all_of(c(input$x_variable, input$y_variable, input$color_variable)) ) ) # render data() output$plot \u0026lt;- Output({ data() }) }) }  Example app When we build the app, we know the id argument will be shared between the UI (example_module_UI()) and server (example_module_Server()) functions:\nui \u0026lt;- fluidPage( example_module_UI(id = \u0026quot;example\u0026quot;) ) server \u0026lt;- function(input, output, session) { example_module_Server(\u0026quot;example\u0026quot;) } shinyApp(ui, server)   The link between IDs created with NS() in the ui and the moduleServer() function in the server is the id.\n Modules make it easier to combine inputs and outputs into the same app without having to worry about namespace collision. Read more about modules in Engineering Production-Grade Shiny Apps and Mastering Shiny.\n","date":1649635200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649710254,"objectID":"d3f3a3764fd49cc88df6cab5f42d2e5d","permalink":"https://www.martinfrigaard.io/post/shiny-namespaces/","publishdate":"2022-04-11T00:00:00Z","relpermalink":"/post/shiny-namespaces/","section":"post","summary":"Namespaces This is a quick post about namespaces in shiny modules. I’ll cover how the NS() function helps organize IDs in the UI, and how these IDs are accessed in the server with moduleServer().","tags":["modules"],"title":"Shiny namespaces","type":"post"},{"authors":["Martin Frigaard"],"categories":["packages"],"content":"The gepfsc4r package is based on the excellent advice in the paper, Good Enough Practices for Scientific Computing by Wilson et al.\nThe goal of gepfsc4r is to create the files and folders outlined in the paper above (and like the folder tree below)\n|-- CITATION |-- README |-- LICENSE |-- requirements.txt |-- data | -- birds_count_table.csv |-- doc | -- notebook.md | -- manuscript.md | -- changelog.txt |-- results | -- summarized_results.csv |-- src | -- sightings_analysis.py | -- runall.py  Installation You can install the Github version below:\ninstall.packages(\u0026quot;devtools\u0026quot;) devtools::install_github(\u0026quot;mjfrigaard/gepfsc4r\u0026quot;)  ","date":1620006453,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620006453,"objectID":"30b0e7cd23c7c45c35076c2afb1baae0","permalink":"https://www.martinfrigaard.io/project/gepfsc4r-r-package/","publishdate":"2021-05-02T18:47:33-07:00","relpermalink":"/project/gepfsc4r-r-package/","section":"project","summary":"R package based on the excellent paper, \"Good enough practices for scientific computing\" (in R)","tags":["rstats"],"title":"`gepfsc4r` R Package","type":"project"},{"authors":["Carmen A. Peralta","Martin Frigaard","Leticia Rolon","Karen Seal","Delphine Tuot","Josh Senyak","Lowell Lo","Neil Powe","Rebecca Scherzer","Shirley Chao","Phillip Chiao","Kimberly Lui","Michael G. Shlipak","Anna D. Rubinsky]"],"categories":[],"content":"","date":1620004287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620004287,"objectID":"f61c5f827223cce9bec0a540575697a3","permalink":"https://www.martinfrigaard.io/publication/cjasn-screening-ckd-vets/","publishdate":"2021-05-02T18:11:27-07:00","relpermalink":"/publication/cjasn-screening-ckd-vets/","section":"publication","summary":"**Background and objectives** - We conducted a pilot, pragmatic, cluster-randomized trial to evaluate feasibility and preliminary effectiveness of screening for CKD using a triple-marker approach (creatinine, cystatin C, and albumin/creatinine ratio), followed by education and guidance, to improve care of hypertensive veterans in primary care. We used the electronic health record for identification, enrollment, intervention delivery, and outcome ascertainment.\n**Design, setting, participants, \u0026 measurements** - We randomized 1819 veterans without diabetes but with hypertension (41 clusters) into three arms: (1) CKD screening followed by patient and provider education; (2) screening, education, plus pharmacist co-management; or (3) usual care. The primary clinical outcome was BP change over 1 year. Implementation and process measures included proportion screened; CKD detection rate; and total and new use of renin-angiotensin system inhibitors, nonsteroidal anti-inflammatory drugs, and diuretics.\n**Results** - Median age was 68 years, 55%werewhite, 1658 (91%) had a prior creatinine measure, but only 172 (9%) had prior urine albumin/creatinine ratio, and 83 (5%) had a prior cystatin C measure. Among those in the intervention, 527 of 1215 (43%) were identified with upcoming appointments to have CKD screening. Of these, 367 (69%) completed testing. Among those tested, 77 (21%) persons had newly diagnosed CKD. After 1 year, change in systolic BP was 21 mm Hg (interquartile range, 211 to 11) in usual care, 22 mmHg (211 to 11) in the screen educate arm, and 22 mmHg (213 to 10) in the screen-educate plus pharmacist arm; P=0.49. There were no significant differences in secondary outcomes in intention-to-treat analyses. In as-treated analyses, higher proportions of participants in the intervention arms initiated a renin-angiotensin system inhibitor (15% and 12% versus 7% in usual care, P=0.01) or diuretic (9% and 12% versus 4%, P=0.03).\n**Conclusions** - The pragmatic design made identification, enrollment, and intervention delivery highly efficient. The limited ability to identify appointments resulted in inadequate between-arm differences in CKD testing rates to determine whether screening improves clinical outcomes.","tags":[],"title":"Screening for CKD To Improve Processes of Care among Nondiabetic Veterans with Hypertension","type":"publication"},{"authors":[],"categories":["workflow"],"content":"Organizing your data, code, documents, and figures in a consistent way that\u0026rsquo;s easy to navigate is one of the most thoughtful and generous things you\u0026rsquo;ll ever do. It\u0026rsquo;s also a basic requirement for a reproducible data science project. In RStudio, this process is made easier with .Rproj files (read more) and the here package.\nWhat fs does? The fs package adds another layer of project organization by giving us access to a \u0026ldquo;uniform interface to file system operations.\u0026rdquo; Many of the fs functions aren\u0026rsquo;t new, but they now have consistent names (path_, file_, dir_, and link_) and return tidy paths (using / and not // or trailing /). Windows users have likely experienced the bane of collaborating with Unix users (and vice versa) because of the difference in file paths.\nHow fs works We will be using Hadley Wickham\u0026rsquo;s nycflights13 package as an example project to demonstrate some of the features of fs. First we\u0026rsquo;ll get a \u0026lsquo;big picture\u0026rsquo; view of the project folder and it\u0026rsquo;s contents using fs::dir_tree():\nfs::dir_tree(\u0026quot;nycflights13\u0026quot;) ## nycflights13 ## ├── DESCRIPTION ## ├── NAMESPACE ## ├── NEWS.md ## ├── R ## │ ├── airlines.R ## │ ├── airport.R ## │ ├── flights.R ## │ ├── planes.R ## │ └── weather.R ## ├── README.md ## ├── cran-comments.md ## ├── data ## │ ├── airlines.rda ## │ ├── airports.rda ## │ ├── flights.rda ## │ ├── planes.rda ## │ └── weather.rda ## ├── data-raw ## │ ├── airlines.R ## │ ├── airlines.csv ## │ ├── airports.R ## │ ├── airports.csv ## │ ├── airports.dat ## │ ├── airports.svg ## │ ├── flights.R ## │ ├── planes.R ## │ ├── planes.csv ## │ ├── weather.R ## │ └── weather.csv ## ├── man ## │ ├── airlines.Rd ## │ ├── airports.Rd ## │ ├── flights.Rd ## │ ├── planes.Rd ## │ └── weather.Rd ## ├── nycflights.Rproj ## └── revdep ## ├── README.md ## ├── email.yml ## └── problems.md  dir_tree() is similar to the tree command in Linux. If we want to narrow the scope of the tree, we can specify a subfolder and use the regexp or glob arguments.\nfs::dir_tree(path = \u0026quot;nycflights13/data-raw\u0026quot;, regexp = \u0026quot;[.]csv$\u0026quot;) ## nycflights13/data-raw ## ├── airlines.csv ## ├── airports.csv ## ├── planes.csv ## └── weather.csv  fs does more than just print folder contents to the screen. We can also construct clean file paths with fs::path()\n# create path to raw data raw_data_path \u0026lt;- fs::path(\u0026quot;nycflights13\u0026quot;, \u0026quot;data-raw\u0026quot;) # view these files in the OS fs::file_show(raw_data_path)  Creating folders and files (with less worry) I have a tendency to create data and code folders frequently. The fs::dir_create() and fs::file_create() functions are great because they don\u0026rsquo;t overwrite my existing folders or files (no need for if(!file.exists(\u0026quot;data)) statements anymore!).\n# assume I already have a data-csv folder and data-csv/README.md file fs::dir_tree(\u0026quot;data-csv\u0026quot;) # what is in this file? base::system(command = \u0026quot;cat 'data-csv/README.md'\u0026quot;)  # data-csv # └── README.md # CSV Data Files # ============== # # PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\\/––√\\/––•––•––√\\/––√\\/––•––•  Obviously some files should not be overwritten or altered after they\u0026rsquo;ve been created.\n# will we overwrite this? try to create new data folder fs::dir_create(\u0026quot;data-csv\u0026quot;) # and try to create new README.md file fs::file_create(\u0026quot;data-csv/README.md\u0026quot;) # check their contents base::system(command = \u0026quot;cat 'data-csv/README.md'\u0026quot;)  # CSV Data Files # ============== # # PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\\/––√\\/––•––•––√\\/––√\\/––•––•  Well that\u0026rsquo;s good news.\nDirectory/file info in tibbles! The best part of fs is that we can store all this meta data from a project repo and manipulate it just like any tibble in tidyverse!\n# store directory inforamtion in NycF13DirInfo NycF13DirInfo \u0026lt;- fs::dir_info(\u0026quot;nycflights13\u0026quot;, recurse = TRUE) NycF13DirInfo %\u0026gt;% # check the files only dplyr::filter(type == \u0026quot;file\u0026quot;) %\u0026gt;% # that are biggest dplyr::arrange(desc(size)) %\u0026gt;% # only view size, birth time, and change time dplyr::select(path, size, birth_time, change_time) %\u0026gt;% # return top 5 utils::head(5) ## path size birth_time ## 1 nycflights13/data/flights.rda 4.1M 2019-09-16 10:29:09 ## 2 nycflights13/data-raw/weather.csv 2.19M 2019-09-16 10:29:09 ## 3 nycflights13/data-raw/airports.dat 830.38K 2019-09-16 10:29:09 ## 4 nycflights13/data-raw/planes.csv 241.4K 2019-09-16 10:29:09 ## 5 nycflights13/data-raw/airports.svg 226.37K 2019-09-16 10:29:09 ## change_time ## 1 2020-05-29 11:37:44 ## 2 2020-05-29 11:37:44 ## 3 2020-05-29 11:37:44 ## 4 2020-05-29 11:37:44 ## 5 2020-05-29 11:37:44  This can come in handy if you\u0026rsquo;re looking for the last time you modified a file, or if you\u0026rsquo;re looking for a particularly large/small file.\nMoving and copying files We can also easily copy files from one location to another. Below we move all the .csv files from data-raw into the parent data folder.\nNycF13DirInfo %\u0026gt;% # find all .csv files dplyr::filter(stringr::str_detect(string = path, pattern = \u0026quot;.csv\u0026quot;)) %\u0026gt;% # move them into the parent data/ folder fs::file_copy(path = .$path, new_path = fs::path(\u0026quot;data-csv\u0026quot;)) # sanity check fs::dir_tree(\u0026quot;data-csv\u0026quot;) ## data-csv ## ├── README.md ## ├── airlines.csv ## ├── airports.csv ## ├── planes.csv ## └── weather.csv  What if we\u0026rsquo;d like to read all of these files into one big data frame? We can create an fs_path which is a named character vector (with some additional coloring on capable terminals).\n# csv files csv_files \u0026lt;- fs::dir_ls(path = \u0026quot;data-csv\u0026quot;, glob = \u0026quot;*.csv\u0026quot;) utils::str(csv_files) ## 'fs_path' Named chr [1:4] \u0026quot;data-csv/airlines.csv\u0026quot; \u0026quot;data-csv/airports.csv\u0026quot; ... ## - attr(*, \u0026quot;names\u0026quot;)= chr [1:4] \u0026quot;data-csv/airlines.csv\u0026quot; \u0026quot;data-csv/airports.csv\u0026quot; \u0026quot;data-csv/planes.csv\u0026quot; \u0026quot;data-csv/weather.csv\u0026quot; base::class(csv_files) ## [1] \u0026quot;fs_path\u0026quot; \u0026quot;character\u0026quot; base::is.character(csv_files) ## [1] TRUE  We can now pass this to purrr::map_df() and get all the .csv files in a huge dataset.\nAllNycFlights \u0026lt;- csv_files %\u0026gt;% purrr::map_df(.f = read_csv, .id = \u0026quot;file\u0026quot;, col_types = cols()) AllNycFlights %\u0026gt;% glimpse() ## Rows: 30,911 ## Columns: 33 ## $ file \u0026lt;chr\u0026gt; \u0026quot;data-csv/airlines.csv\u0026quot;, \u0026quot;data-csv/airlines.csv\u0026quot;, \u0026quot;data-… ## $ carrier \u0026lt;chr\u0026gt; \u0026quot;9E\u0026quot;, \u0026quot;AA\u0026quot;, \u0026quot;AS\u0026quot;, \u0026quot;B6\u0026quot;, \u0026quot;DL\u0026quot;, \u0026quot;EV\u0026quot;, \u0026quot;F9\u0026quot;, \u0026quot;FL\u0026quot;, \u0026quot;HA\u0026quot;, \u0026quot;M… ## $ name \u0026lt;chr\u0026gt; \u0026quot;Endeavor Air Inc.\u0026quot;, \u0026quot;American Airlines Inc.\u0026quot;, \u0026quot;Alaska A… ## $ faa \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ lat \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ lon \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ alt \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ tz \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ dst \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ tzone \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ tailnum \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ year \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ type \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ manufacturer \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ model \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ engines \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ seats \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ speed \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ engine \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ origin \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ month \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ day \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ hour \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ temp \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ dewp \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ humid \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ wind_dir \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ wind_speed \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ wind_gust \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ precip \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ pressure \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ visib \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ time_hour \u0026lt;dttm\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…  Yikes! Crazy huh? Well, this isn\u0026rsquo;t very practical to work with, but we could use dplyr::filter() to get the datasets we needed.\nThe different values for file should correspond to the number of observations in each dataset in the nycflights13 package.\n# are these the number of observations per dataset? AllNycFlights %\u0026gt;% dplyr::count(file, sort = TRUE) ## # A tibble: 4 x 2 ## file n ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 data-csv/weather.csv 26115 ## 2 data-csv/planes.csv 3322 ## 3 data-csv/airports.csv 1458 ## 4 data-csv/airlines.csv 16 # sanity check nycflights13::weather %\u0026gt;% base::nrow() ## [1] 26115 # yes  Works well with purrr package! Ok, let\u0026rsquo;s time-stamp these files and export them into a today-csv folder fun!\n# create today-csv folder fs::dir_create(\u0026quot;today-csv\u0026quot;) # create path today_csv_path \u0026lt;- fs::path(\u0026quot;today-csv/\u0026quot;, base::noquote(lubridate::today()), \u0026quot;/\u0026quot;) # remove previous path from file AllNycFlights %\u0026gt;% dplyr::mutate(file = stringr::str_remove_all(string = file, pattern = \u0026quot;data-csv/\u0026quot;)) %\u0026gt;% # group by file dplyr::group_by(file) %\u0026gt;% # keep only distinct rows (probably redundant) dplyr::group_map(~ dplyr::distinct(.x, .keep_all=TRUE), keep = TRUE) %\u0026gt;% purrr::walk(~.x %\u0026gt;% readr::write_csv(path = paste0(today_csv_path, \u0026quot;_\u0026quot;, unique(.x$file)))) # sanity check! fs::dir_tree(\u0026quot;today-csv\u0026quot;) ## today-csv ## ├── 2020-05-29_airlines.csv ## ├── 2020-05-29_airports.csv ## ├── 2020-05-29_planes.csv ## └── 2020-05-29_weather.csv  Check out the vignette and package site for more information!\n","date":1619913600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619999671,"objectID":"34bad89466c5286c19c3133c88d7d1dd","permalink":"https://www.martinfrigaard.io/post/how-to-manage-your-files-with-fs/","publishdate":"2021-05-02T00:00:00Z","relpermalink":"/post/how-to-manage-your-files-with-fs/","section":"post","summary":"Organizing your data, code, documents, and figures in a consistent way that\u0026rsquo;s easy to navigate is one of the most thoughtful and generous things you\u0026rsquo;ll ever do. It\u0026rsquo;s also a basic requirement for a reproducible data science project.","tags":[],"title":"How to manage your files with fs","type":"post"},{"authors":null,"categories":null,"content":"The CHC/CalFresh Shiny Dashboard is a shiny dashboard built with the flexdashboard package.\n","date":1616112000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616112000,"objectID":"a05e23dfc33be5a950c2ab53a689bbc0","permalink":"https://www.martinfrigaard.io/project/calfresh-project/","publishdate":"2021-03-19T00:00:00Z","relpermalink":"/project/calfresh-project/","section":"project","summary":"A shiny dashboard to track CalFresh grant activities for the California State University system.","tags":["flexdashboard"],"title":"CalFresh Shiny Dashboard","type":"project"},{"authors":["Martin Frigaard","Aleszu Bajak"],"categories":null,"content":"","date":1592265600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592265600,"objectID":"b2d16c722b16f252a51696a10dac8494","permalink":"https://www.martinfrigaard.io/publication/ojo-publico-covid-2020/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/ojo-publico-covid-2020/","section":"publication","summary":"Comparison of drugs being used to treat Covid-19, with a focus on Latin American countries.","tags":["COVID-19"],"title":"Treating Covid-19 - When enthusiasm trumps evidence","type":"publication"},{"authors":[],"categories":null,"content":"","date":1555678800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555678800,"objectID":"2df9f474f3d8b7ee26f1519fb7b36955","permalink":"https://www.martinfrigaard.io/talk/analytic-literacy-for-the-21st-century/","publishdate":"2019-04-26T00:00:00Z","relpermalink":"/talk/analytic-literacy-for-the-21st-century/","section":"event","summary":"Paradigm Data Group talk for CSUC Data Science Initiative.","tags":[],"title":"Analytic Literacy for the 21st Century","type":"event"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://www.martinfrigaard.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"The BGM/SEG Shiny App was initially part of the Diabetes Technology Society\u0026rsquo;s Blood Glucose Monitor Surveillance Program (see original research here and here). I helped the authors of that study convert the findings in their paper to a shiny app.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"b2da5c6f5889250d52712efbc45b9fbe","permalink":"https://www.martinfrigaard.io/project/bgm-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/bgm-project/","section":"project","summary":"Shiny application for the diabetes technology society, which clinicians can use to upload point-of-care glucose monitor readings and compare them to lab reference plasma specimens.","tags":["biometrics"],"title":"Blood Glucose Monitoring System Surveillance Program","type":"project"}]