<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Martin Frigaard</title>
    <link>https://www.martinfrigaard.io/</link>
      <atom:link href="https://www.martinfrigaard.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Martin Frigaard</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.martinfrigaard.io/images/icon_hu3d9b8ff6daa3b348146f397d19f29135_559448_512x512_fill_lanczos_center_2.png</url>
      <title>Martin Frigaard</title>
      <link>https://www.martinfrigaard.io/</link>
    </image>
    
    <item>
      <title>Shiny namespaces</title>
      <link>https://www.martinfrigaard.io/post/shiny-namespaces/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/post/shiny-namespaces/</guid>
      <description>&lt;h1 id=&#34;namespaces&#34;&gt;Namespaces&lt;/h1&gt;
&lt;br&gt;
&lt;p&gt;This is a quick post about namespaces in shiny modules. I’ll cover how the &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; function helps organize IDs in the UI, and how these IDs are accessed in the server with &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;keeping-track-of-all-those-inputidsoutputids&#34;&gt;Keeping track of all those inputIds/outputIds&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;As you can imagine, keeping track of all the IDs (&lt;strong&gt;&lt;code&gt;inputId&lt;/code&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;code&gt;input$&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;outputId&lt;/code&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;code&gt;output$&lt;/code&gt;&lt;/strong&gt;) becomes &lt;a href=&#34;https://engineering-shiny.org/structuring-project.html#a.-your-first-shiny-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;difficult and time consuming&lt;/a&gt;. It’s also hard to anticipate which names we’ll need in the future, or the level of precision these names require. This is where modules and namespaces come in handy.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;what-is-a-namespace-in-a-shiny-app&#34;&gt;What is a namespace in a shiny app?&lt;/h2&gt;
&lt;br&gt;
&lt;h4 id=&#34;a-namespace-is-to-an-id-as-a-directory-is-to-a-file&#34;&gt;&lt;em&gt;&lt;strong&gt;“…a namespace is to an ID as a directory is to a file…”&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;br&gt;
&lt;p&gt;The quote above is from the &lt;a href=&#34;https://shiny.rstudio.com/reference/shiny/0.13.1/NS.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; help files&lt;/a&gt;, and I’ve found it’s a great way to conceptualize what &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; is creating.&lt;/p&gt;
&lt;p&gt;If we imagine creating two files with identical names (&lt;strong&gt;&lt;code&gt;file.R&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;file.R&lt;/code&gt;&lt;/strong&gt;) we quickly discover they can’t exist in the same directory. See what happens below when we try to create them in a directory named &lt;strong&gt;&lt;code&gt;folder&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_create(&amp;quot;folder&amp;quot;) # create directory
fs::file_create(&amp;quot;folder/file.R&amp;quot;) # create file 1
fs::file_create(&amp;quot;folder/file.R&amp;quot;) # create file 2 (same name)
fs::dir_tree(&amp;quot;folder&amp;quot;) # check files in directory
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;folder/
    └── file.R
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;We can see there is only one &lt;strong&gt;&lt;code&gt;file.R&lt;/code&gt;&lt;/strong&gt; in the &lt;strong&gt;&lt;code&gt;folder/&lt;/code&gt;&lt;/strong&gt; directory (the second &lt;strong&gt;&lt;code&gt;fs::file_create(&amp;quot;folder/file.R&amp;quot;)&lt;/code&gt;&lt;/strong&gt; overwrote the first &lt;strong&gt;&lt;code&gt;file.R&lt;/code&gt;&lt;/strong&gt;). You’ve probably seen an error like this when trying to save two files with the same name into the same folder.&lt;/p&gt;
&lt;p&gt;However, we can have files with identical names in two &lt;em&gt;different&lt;/em&gt; folders, but we have to reorganize the structure. Below we’ve created a parent folder (&lt;strong&gt;&lt;code&gt;folder/&lt;/code&gt;&lt;/strong&gt;) with two sub-folders (&lt;strong&gt;&lt;code&gt;sub-folder-A/&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;sub-folder-B/&lt;/code&gt;&lt;/strong&gt;), where we can place each file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; folder/
    ├── sub-folder-A/
    │       └── file.R
    └── sub-folder-B/
            └── file.R
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;By placing the files in sub-directories, we’ve made the &lt;em&gt;&lt;strong&gt;path&lt;/strong&gt;&lt;/em&gt; to each file unique, which makes it possible for them to have identical names. We can access these files using their &lt;em&gt;&lt;strong&gt;unique path&lt;/strong&gt;&lt;/em&gt; (not their unique name). The &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; function works in a similar way by creating a unique ‘&lt;em&gt;&lt;strong&gt;path&lt;/strong&gt;&lt;/em&gt;’ for each ID the module.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;using-ns&#34;&gt;Using &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;br&gt;
&lt;p&gt;Sometimes you’ll see &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; used to create a separate &lt;strong&gt;&lt;code&gt;ns()&lt;/code&gt;&lt;/strong&gt; function, which is then used to define IDs in the module (i.e. &lt;strong&gt;&lt;code&gt;ns &amp;lt;- shiny::NS(id)&lt;/code&gt;&lt;/strong&gt; then &lt;strong&gt;&lt;code&gt;ns(&amp;quot;[name]&amp;quot;))&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;text_example_01_UI &amp;lt;- function(id) {
  ns &amp;lt;- shiny::NS(id)
  tagList(
    textAreaInput(inputId = ns(&amp;quot;text_in&amp;quot;), 
                  label = &amp;quot;Text&amp;quot;),
    verbatimTextOutput(ns(&amp;quot;text_out&amp;quot;))
  )
}
text_example_01_UI(id = &amp;quot;text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;form-group shiny-input-container&#34;&gt;
&lt;label class=&#34;control-label&#34; id=&#34;text-text_in-label&#34; for=&#34;text-text_in&#34;&gt;Text&lt;/label&gt;
&lt;textarea id=&#34;text-text_in&#34; class=&#34;form-control&#34;&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;pre class=&#34;shiny-text-output noplaceholder&#34; id=&#34;text-text_out&#34;&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;Other times you’ll see it written explicitly (with &lt;strong&gt;&lt;code&gt;NS(namespace = id, id = &amp;quot;[name]&amp;quot;)&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;text_example_02_UI &amp;lt;- function(id) {
  tagList(
    textAreaInput(inputId = NS(namespace = id, 
                               id = &amp;quot;text_in&amp;quot;), 
                  label = &amp;quot;Text&amp;quot;),
    verbatimTextOutput(outputId = NS(namespace = id, 
                               id = &amp;quot;text_out&amp;quot;))
  )
}
text_example_02_UI(id = &amp;quot;text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;form-group shiny-input-container&#34;&gt;
&lt;label class=&#34;control-label&#34; id=&#34;text-text_in-label&#34; for=&#34;text-text_in&#34;&gt;Text&lt;/label&gt;
&lt;textarea id=&#34;text-text_in&#34; class=&#34;form-control&#34;&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;pre class=&#34;shiny-text-output noplaceholder&#34; id=&#34;text-text_out&#34;&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;As you can see, both methods work. This is because “&lt;em&gt;if &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; is missing, [&lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt;] returns a function that expects an &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; string as its only argument and returns that &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; with the namespace prepended.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;To see what the unique ‘location’ for a namespaced ID looks like, we can define our namespace in a string (“text”), then create a new object from &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; (&lt;strong&gt;&lt;code&gt;name_Spaceded()&lt;/code&gt;&lt;/strong&gt;) and examine it’s contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# define a namespace
id &amp;lt;- &amp;quot;text&amp;quot;
# create the function
name_Spaceded &amp;lt;- NS(namespace = id)
# view the contents
name_Spaceded
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## function (id) 
## {
##     if (length(id) == 0) 
##         return(ns_prefix)
##     if (length(ns_prefix) == 0) 
##         return(id)
##     paste(ns_prefix, id, sep = ns.sep)
## }
## &amp;lt;bytecode: 0x7fe6365d39f0&amp;gt;
## &amp;lt;environment: 0x7fe63eb85b30&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, the function created by &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; is pasting together two strings: the &lt;strong&gt;&lt;code&gt;ns_prefix&lt;/code&gt;&lt;/strong&gt; (the namespace prefix) and the &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So if we supply an empty &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;code&gt;name_Spaceded()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# empty id
name_Spaceded(id = &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;text-&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the first &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; we passed was the name for the namespace. When we supply a character string to &lt;strong&gt;&lt;code&gt;name_Spaceded()&lt;/code&gt;&lt;/strong&gt; (imitating an &lt;strong&gt;&lt;code&gt;inputId&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;outputId&lt;/code&gt;&lt;/strong&gt;)…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# &amp;quot;namespace&amp;quot; the id
name_Spaceded(&amp;quot;text_in&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;text-text_in&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;name_Spaceded()&lt;/code&gt;&lt;/strong&gt; has replaced what would be &lt;strong&gt;&lt;code&gt;input$text_in&lt;/code&gt;&lt;/strong&gt;–shared globally across our entire application–with &lt;strong&gt;&lt;code&gt;input$text_in&lt;/code&gt;&lt;/strong&gt;, which is isolated in the &lt;strong&gt;&lt;code&gt;text&lt;/code&gt;&lt;/strong&gt; module.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;module-directory-structure&#34;&gt;Module ‘directory’ structure&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;Just like we can’t have identical file names in the same folder, we can’t have two IDs with the same name in the same app. To get around this, we create modules by pairing &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the UI module, &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; isolates the IDs into a namespace (pasting together &lt;strong&gt;&lt;code&gt;ns_prefix&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt;), which we can access via &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the server module, the &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt; function includes both &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;module&lt;/code&gt;&lt;/strong&gt; arguments. The &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; will be linked to it’s complimentary UI function, and &lt;strong&gt;&lt;code&gt;module&lt;/code&gt;&lt;/strong&gt; is defined just like the standard shiny &lt;strong&gt;&lt;code&gt;server&lt;/code&gt;&lt;/strong&gt; function (&lt;strong&gt;&lt;code&gt;function(input, output, session)&lt;/code&gt;&lt;/strong&gt;). There is also a &lt;strong&gt;&lt;code&gt;session&lt;/code&gt;&lt;/strong&gt; argument, but it’s almost always set to the default value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an application folder-tree that mimics how IDs are contained within a module namespaces:&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  app/
    └── module-plot/ # plot module UI namespace 
            └── UI/ 
            │   ├── inputId=NS(namespace = id, id = &amp;quot;x_variable&amp;quot;)
            │   ├── inputId=NS(namespace = id, id = &amp;quot;y_variable&amp;quot;)
            │   ├── inputId=NS(namespace = id, id = &amp;quot;color_variable&amp;quot;)
            │   └── outputId=NS(namespace = id, id = &amp;quot;table&amp;quot;)
            └── server/ # plot module (server) 
                └── moduleServer(id = id, 
                                 module = function(input, output, session))
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Within our &lt;strong&gt;&lt;code&gt;app/&lt;/code&gt;&lt;/strong&gt; directory, we have the &lt;strong&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/strong&gt; module with **&lt;code&gt;inputId&lt;/code&gt;**s (referenced in the server as &lt;strong&gt;&lt;code&gt;input$&lt;/code&gt;&lt;/strong&gt;) and an &lt;strong&gt;&lt;code&gt;outputId&lt;/code&gt;&lt;/strong&gt; (referenced in the server as &lt;strong&gt;&lt;code&gt;output$&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These IDs must be unique within the module’s namespace (created with &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt;), but they no longer have to be unique within the app)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We use the &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; function to isolate and name the IDs into a namespace (i.e. &lt;strong&gt;&lt;code&gt;id = &amp;quot;[name]&amp;quot;&lt;/code&gt;&lt;/strong&gt;), then we access these IDs in the server with &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt; (which we will cover below).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2 id=&#34;example-ui&#34;&gt;Example UI&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;Below is an example UI function for a module with input and output functions and their IDs (&lt;strong&gt;&lt;code&gt;input$x_variable&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;input$y_variable&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;output$plot&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example_module_UI &amp;lt;- function(id) {
    tagList(
        # input
        selectInput(
            inputId = NS(namespace = id, 
                         id = &amp;quot;x_variable&amp;quot;)
            # ...additional arguments omitted...
            ),
        # input
        selectInput(
            inputId = NS(namespace = id, 
                         id = &amp;quot;y_variable&amp;quot;)
            # ...additional arguments omitted...
            ),
        # input
        selectInput(
            inputId = NS(namespace = id, 
                         id = &amp;quot;color_variable&amp;quot;)
            # ...additional arguments omitted...
            ),
        # output
        plotOutput(
            outputId = NS(namespace = id, 
                         id = &amp;quot;plot&amp;quot;))
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;example-server&#34;&gt;Example server&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;When we build the server component, we include a call to &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt;, and assume the server will have access to the same inputs and outputs defined in the UI:&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;example_module_Server &amp;lt;- function(id) {
    
  moduleServer(id = id, module = function(input, output, session) {
      
      # data reactive
      data &amp;lt;- reactive(
          select(
            &amp;lt;data&amp;gt;,
            all_of(c(input$x_variable, 
                     input$y_variable, 
                     input$color_variable))
          )
        )
      
      # render plot
      output$plot &amp;lt;- Output({
          data()
      })
      
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;example-app&#34;&gt;Example app&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;When we build the app, we know the &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; argument will be shared between the UI (&lt;strong&gt;&lt;code&gt;example_module_UI()&lt;/code&gt;&lt;/strong&gt;) and server (&lt;strong&gt;&lt;code&gt;example_module_Server()&lt;/code&gt;&lt;/strong&gt;) functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ui &amp;lt;- fluidPage(
  example_module_UI(id = &amp;quot;example&amp;quot;)
)

server &amp;lt;- function(input, output, session) {
  example_module_Server(id = &amp;quot;example&amp;quot;)
}

shinyApp(ui, server)
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;The link between the IDs created with &lt;strong&gt;&lt;code&gt;NS()&lt;/code&gt;&lt;/strong&gt; in the &lt;strong&gt;&lt;code&gt;ui&lt;/code&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;code&gt;moduleServer()&lt;/code&gt;&lt;/strong&gt; function in the &lt;strong&gt;&lt;code&gt;server&lt;/code&gt;&lt;/strong&gt; is the &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;recap&#34;&gt;Recap&lt;/h2&gt;
&lt;p&gt;Modules make it easier to combine inputs and outputs into the same app without having to worry about &lt;a href=&#34;https://en.wikipedia.org/wiki/Naming_collision&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;namespace collision&lt;/a&gt;. Read more about modules in &lt;a href=&#34;https://engineering-shiny.org/structuring-project.html#using-shiny-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Engineering Production-Grade Shiny Apps&lt;/a&gt; and &lt;a href=&#34;https://mastering-shiny.org/scaling-modules.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mastering Shiny&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>`goodenuffR` R Package</title>
      <link>https://www.martinfrigaard.io/project/goodenuffr-r-package/</link>
      <pubDate>Sun, 02 May 2021 18:47:33 -0700</pubDate>
      <guid>https://www.martinfrigaard.io/project/goodenuffr-r-package/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/mjfrigaard/goodenuffR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;goodenuffR&lt;/code&gt; package&lt;/a&gt; is based on the &lt;strong&gt;excellent&lt;/strong&gt; advice in the
paper, &lt;a href=&#34;https://swcarpentry.github.io/good-enough-practices-in-scientific-computing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Good Enough Practices for Scientific Computing&lt;/a&gt;
by Wilson et al.&lt;/p&gt;
&lt;p&gt;The goal of &lt;code&gt;goodenuffR&lt;/code&gt; is to setup your project files and folders in a
structure similar to the one outlined in the paper above (and like the folder tree below):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;|-- CITATION
|-- README
|-- LICENSE
|-- requirements.txt
|-- data
|   -- birds_count_table.csv
|-- doc
|   -- notebook.md
|   -- manuscript.md
|   -- changelog.txt
|-- results
|   -- summarized_results.csv
|-- src
|   -- sightings_analysis.py
|   -- runall.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;goodenuffR&lt;/code&gt; creates the format below using the following lines of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;mjfrigaard/goodenuffR&amp;quot;)
library(goodenuffR)
goodenuffR::goodenuff_project(project_name = &amp;quot;my project&amp;quot;, # name of project
                                folder_path = &amp;quot;~/projects&amp;quot;) # path to project
goodenuff_files()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;├── CITATION
├── LICENSE
├── README.Rmd
├── code
│   ├── 01-import.R
│   ├── 02-tidy.R
│   ├── 03-wrangle.R
│   ├── 04-visualize.R
│   ├── 05-model.R
│   ├── 06-communicate.R
│   └── runall.R
├── data
│   ├── README.md
│   └── raw
├── docs
│   ├── changelog.txt
│   ├── manuscript.Rmd
│   └── notebook.Rmd
├── my_project.Rproj
├── requirements.txt
└── results
    ├── figures
    ├── manuscript
    └── tables
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;package-website&#34;&gt;Package website&lt;/h2&gt;
&lt;p&gt;Here is a link for the package website I built using the phenomenal &lt;a href=&#34;https://pkgdown.r-lib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkgdown&lt;/a&gt; package. Feel free to check it out and leave comments!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Screening for CKD To Improve Processes of Care among Nondiabetic Veterans with Hypertension</title>
      <link>https://www.martinfrigaard.io/publication/cjasn-screening-ckd-vets/</link>
      <pubDate>Sun, 02 May 2021 18:11:27 -0700</pubDate>
      <guid>https://www.martinfrigaard.io/publication/cjasn-screening-ckd-vets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to manage your files with fs</title>
      <link>https://www.martinfrigaard.io/post/how-to-manage-your-files-with-fs/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/post/how-to-manage-your-files-with-fs/</guid>
      <description>&lt;p&gt;Organizing your data, code, documents, and figures in a consistent way that&amp;rsquo;s easy to navigate is one of the most thoughtful and generous things you&amp;rsquo;ll ever do. It&amp;rsquo;s also a basic requirement for a reproducible data science project. In RStudio, this process is made easier with &lt;code&gt;.Rproj&lt;/code&gt; files (&lt;a href=&#34;https://www.tidyverse.org/blog/2017/12/workflow-vs-script/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;read more&lt;/a&gt;) and the &lt;a href=&#34;https://github.com/jennybc/here_here&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;here&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-fs-does&#34;&gt;What &lt;code&gt;fs&lt;/code&gt; does?&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/fs/readme/README.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;fs&lt;/code&gt; package&lt;/a&gt; adds another layer of project organization by giving us access to a &amp;ldquo;&lt;em&gt;uniform interface to file system operations.&lt;/em&gt;&amp;rdquo; Many of the &lt;code&gt;fs&lt;/code&gt; functions aren&amp;rsquo;t new, but they now have consistent names (&lt;code&gt;path_&lt;/code&gt;, &lt;code&gt;file_&lt;/code&gt;, &lt;code&gt;dir_&lt;/code&gt;, and &lt;code&gt;link_&lt;/code&gt;) and return tidy paths (using &lt;code&gt;/&lt;/code&gt; and not &lt;code&gt;//&lt;/code&gt; or trailing &lt;code&gt;/&lt;/code&gt;). Windows users have likely experienced the bane of collaborating with Unix users (and vice versa) because of the &lt;a href=&#34;https://www.howtogeek.com/181774/why-windows-uses-backslashes-and-everything-else-uses-forward-slashes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;difference in file paths&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-fs-works&#34;&gt;How &lt;code&gt;fs&lt;/code&gt; works&lt;/h2&gt;
&lt;p&gt;We will be using &lt;a href=&#34;https://github.com/hadley/nycflights13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&amp;rsquo;s &lt;code&gt;nycflights13&lt;/code&gt; package&lt;/a&gt; as an example project to demonstrate some of the features of &lt;code&gt;fs&lt;/code&gt;. First we&amp;rsquo;ll get a &amp;lsquo;big picture&amp;rsquo; view of the project folder and it&amp;rsquo;s contents using &lt;code&gt;fs::dir_tree()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(&amp;quot;nycflights13&amp;quot;)
## nycflights13
## ├── DESCRIPTION
## ├── NAMESPACE
## ├── NEWS.md
## ├── R
## │   ├── airlines.R
## │   ├── airport.R
## │   ├── flights.R
## │   ├── planes.R
## │   └── weather.R
## ├── README.md
## ├── cran-comments.md
## ├── data
## │   ├── airlines.rda
## │   ├── airports.rda
## │   ├── flights.rda
## │   ├── planes.rda
## │   └── weather.rda
## ├── data-raw
## │   ├── airlines.R
## │   ├── airlines.csv
## │   ├── airports.R
## │   ├── airports.csv
## │   ├── airports.dat
## │   ├── airports.svg
## │   ├── flights.R
## │   ├── planes.R
## │   ├── planes.csv
## │   ├── weather.R
## │   └── weather.csv
## ├── man
## │   ├── airlines.Rd
## │   ├── airports.Rd
## │   ├── flights.Rd
## │   ├── planes.Rd
## │   └── weather.Rd
## ├── nycflights.Rproj
## └── revdep
##     ├── README.md
##     ├── email.yml
##     └── problems.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dir_tree()&lt;/code&gt; is similar to the &lt;a href=&#34;https://www.geeksforgeeks.org/tree-command-unixlinux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tree&lt;/code&gt; command in Linux&lt;/a&gt;. If we want to narrow the scope of the tree, we can specify a subfolder and use the &lt;code&gt;regexp&lt;/code&gt; or &lt;code&gt;glob&lt;/code&gt; arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(path = &amp;quot;nycflights13/data-raw&amp;quot;, regexp = &amp;quot;[.]csv$&amp;quot;)
## nycflights13/data-raw
## ├── airlines.csv
## ├── airports.csv
## ├── planes.csv
## └── weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; does more than just print folder contents to the screen. We can also construct clean file paths with &lt;code&gt;fs::path()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create path to raw data 
raw_data_path &amp;lt;- fs::path(&amp;quot;nycflights13&amp;quot;, &amp;quot;data-raw&amp;quot;)
# view these files in the OS
fs::file_show(raw_data_path)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;images/file_show.png&#34; alt=&#34;&#34; width=&#34;80%&#34; height=&#34;80%&#34;/&gt;
&lt;h2 id=&#34;creating-folders-and-files-with-less-worry&#34;&gt;Creating folders and files (with less worry)&lt;/h2&gt;
&lt;p&gt;I have a tendency to create &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt; folders frequently. The &lt;code&gt;fs::dir_create()&lt;/code&gt; and &lt;code&gt;fs::file_create()&lt;/code&gt; functions are great because they don&amp;rsquo;t overwrite my existing folders or files (no need for &lt;code&gt;if(!file.exists(&amp;quot;data))&lt;/code&gt; statements anymore!).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# assume I already have a data-csv folder and data-csv/README.md file
fs::dir_tree(&amp;quot;data-csv&amp;quot;)
# what is in this file?
base::system(command = &amp;quot;cat &#39;data-csv/README.md&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# data-csv
# └── README.md
# CSV Data Files
# ==============
# 
# PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\/––√\/––•––•––√\/––√\/––•––•
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously some files should not be overwritten or altered after they&amp;rsquo;ve been created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# will we overwrite this? try to create new data folder
fs::dir_create(&amp;quot;data-csv&amp;quot;)
# and try to create new README.md file
fs::file_create(&amp;quot;data-csv/README.md&amp;quot;)
# check their contents 
base::system(command = &amp;quot;cat &#39;data-csv/README.md&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# CSV Data Files
# ==============
# 
# PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\/––√\/––•––•––√\/––√\/––•––•
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;rsquo;s good news.&lt;/p&gt;
&lt;h3 id=&#34;directoryfile-info-in-tibbles&#34;&gt;Directory/file info in tibbles!&lt;/h3&gt;
&lt;p&gt;The best part of &lt;code&gt;fs&lt;/code&gt; is that we can store all this meta data from a project repo and manipulate it just like any &lt;code&gt;tibble&lt;/code&gt; in &lt;code&gt;tidyverse&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# store directory inforamtion in NycF13DirInfo
NycF13DirInfo &amp;lt;- fs::dir_info(&amp;quot;nycflights13&amp;quot;, recurse = TRUE)
NycF13DirInfo %&amp;gt;% 
  # check the files only
  dplyr::filter(type == &amp;quot;file&amp;quot;) %&amp;gt;% 
  # that are biggest 
  dplyr::arrange(desc(size)) %&amp;gt;% 
  # only view size, birth time, and change time
  dplyr::select(path, size, birth_time, change_time) %&amp;gt;% 
  # return top 5
  utils::head(5)
##                                 path    size          birth_time
## 1      nycflights13/data/flights.rda    4.1M 2019-09-16 10:29:09
## 2  nycflights13/data-raw/weather.csv   2.19M 2019-09-16 10:29:09
## 3 nycflights13/data-raw/airports.dat 830.38K 2019-09-16 10:29:09
## 4   nycflights13/data-raw/planes.csv  241.4K 2019-09-16 10:29:09
## 5 nycflights13/data-raw/airports.svg 226.37K 2019-09-16 10:29:09
##           change_time
## 1 2020-05-29 11:37:44
## 2 2020-05-29 11:37:44
## 3 2020-05-29 11:37:44
## 4 2020-05-29 11:37:44
## 5 2020-05-29 11:37:44
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can come in handy if you&amp;rsquo;re looking for the last time you modified a file, or if you&amp;rsquo;re looking for a particularly large/small file.&lt;/p&gt;
&lt;h2 id=&#34;moving-and-copying-files&#34;&gt;Moving and copying files&lt;/h2&gt;
&lt;p&gt;We can also easily copy files from one location to another. Below we move all the &lt;code&gt;.csv&lt;/code&gt; files from &lt;code&gt;data-raw&lt;/code&gt; into the parent &lt;code&gt;data&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NycF13DirInfo %&amp;gt;% 
  # find all .csv files 
  dplyr::filter(stringr::str_detect(string = path, pattern = &amp;quot;.csv&amp;quot;)) %&amp;gt;% 
  # move them into the parent data/ folder
  fs::file_copy(path = .$path, new_path =  fs::path(&amp;quot;data-csv&amp;quot;))
# sanity check
fs::dir_tree(&amp;quot;data-csv&amp;quot;)
## data-csv
## ├── README.md
## ├── airlines.csv
## ├── airports.csv
## ├── planes.csv
## └── weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we&amp;rsquo;d like to read all of these files into one big data frame? We can create an &lt;code&gt;fs_path&lt;/code&gt; which is a named character vector (with some additional coloring on capable terminals).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# csv files
csv_files &amp;lt;- fs::dir_ls(path = &amp;quot;data-csv&amp;quot;, glob = &amp;quot;*.csv&amp;quot;)
utils::str(csv_files)
##  &#39;fs_path&#39; Named chr [1:4] &amp;quot;data-csv/airlines.csv&amp;quot; &amp;quot;data-csv/airports.csv&amp;quot; ...
##  - attr(*, &amp;quot;names&amp;quot;)= chr [1:4] &amp;quot;data-csv/airlines.csv&amp;quot; &amp;quot;data-csv/airports.csv&amp;quot; &amp;quot;data-csv/planes.csv&amp;quot; &amp;quot;data-csv/weather.csv&amp;quot;
base::class(csv_files)
## [1] &amp;quot;fs_path&amp;quot;   &amp;quot;character&amp;quot;
base::is.character(csv_files)
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now pass this to &lt;code&gt;purrr::map_df()&lt;/code&gt; and get all the .csv files in a huge dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;AllNycFlights &amp;lt;- csv_files %&amp;gt;%
  purrr::map_df(.f = read_csv, .id = &amp;quot;file&amp;quot;, col_types = cols()) 
AllNycFlights %&amp;gt;% glimpse()
## Rows: 30,911
## Columns: 33
## $ file         &amp;lt;chr&amp;gt; &amp;quot;data-csv/airlines.csv&amp;quot;, &amp;quot;data-csv/airlines.csv&amp;quot;, &amp;quot;data-…
## $ carrier      &amp;lt;chr&amp;gt; &amp;quot;9E&amp;quot;, &amp;quot;AA&amp;quot;, &amp;quot;AS&amp;quot;, &amp;quot;B6&amp;quot;, &amp;quot;DL&amp;quot;, &amp;quot;EV&amp;quot;, &amp;quot;F9&amp;quot;, &amp;quot;FL&amp;quot;, &amp;quot;HA&amp;quot;, &amp;quot;M…
## $ name         &amp;lt;chr&amp;gt; &amp;quot;Endeavor Air Inc.&amp;quot;, &amp;quot;American Airlines Inc.&amp;quot;, &amp;quot;Alaska A…
## $ faa          &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ lat          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ lon          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ alt          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tz           &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ dst          &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tzone        &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tailnum      &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ year         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ type         &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ manufacturer &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ model        &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ engines      &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ seats        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ speed        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ engine       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ origin       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ month        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ day          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ hour         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ temp         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ dewp         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ humid        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_dir     &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_speed   &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_gust    &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ precip       &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ pressure     &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ visib        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ time_hour    &amp;lt;dttm&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yikes! Crazy huh? Well, this isn&amp;rsquo;t very practical to work with, but we could use &lt;code&gt;dplyr::filter()&lt;/code&gt; to get the datasets we needed.&lt;/p&gt;
&lt;p&gt;The different values for &lt;code&gt;file&lt;/code&gt; should correspond to the number of observations in each dataset in the &lt;code&gt;nycflights13&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# are these the number of observations per dataset?
AllNycFlights %&amp;gt;% dplyr::count(file, sort = TRUE)
## # A tibble: 4 x 2
##   file                      n
##   &amp;lt;chr&amp;gt;                 &amp;lt;int&amp;gt;
## 1 data-csv/weather.csv  26115
## 2 data-csv/planes.csv    3322
## 3 data-csv/airports.csv  1458
## 4 data-csv/airlines.csv    16
# sanity check 
nycflights13::weather %&amp;gt;% base::nrow()
## [1] 26115
# yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;works-well-with-purrr-package&#34;&gt;Works well with &lt;code&gt;purrr&lt;/code&gt; package!&lt;/h2&gt;
&lt;p&gt;Ok, let&amp;rsquo;s time-stamp these files and export them into a &lt;code&gt;today-csv&lt;/code&gt; folder fun!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create today-csv folder
fs::dir_create(&amp;quot;today-csv&amp;quot;)
# create path
today_csv_path &amp;lt;- fs::path(&amp;quot;today-csv/&amp;quot;, base::noquote(lubridate::today()), &amp;quot;/&amp;quot;)
# remove previous path from file
AllNycFlights %&amp;gt;%
  dplyr::mutate(file = stringr::str_remove_all(string = file, 
                                               pattern = &amp;quot;data-csv/&amp;quot;)) %&amp;gt;% 
  # group by file
  dplyr::group_by(file) %&amp;gt;% 
  # keep only distinct rows (probably redundant)
  dplyr::group_map(~ dplyr::distinct(.x, .keep_all=TRUE), keep = TRUE) %&amp;gt;%
  purrr::walk(~.x %&amp;gt;% 
                 readr::write_csv(path = paste0(today_csv_path, 
                                         &amp;quot;_&amp;quot;,
                                         unique(.x$file))))
# sanity check!
fs::dir_tree(&amp;quot;today-csv&amp;quot;)
## today-csv
## ├── 2020-05-29_airlines.csv
## ├── 2020-05-29_airports.csv
## ├── 2020-05-29_planes.csv
## └── 2020-05-29_weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the vignette and package site for more information!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CalFresh Shiny Dashboard</title>
      <link>https://www.martinfrigaard.io/project/calfresh-project/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/project/calfresh-project/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://mjfrigaard.shinyapps.io/beta-cfo-chc-031/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CHC/CalFresh Shiny Dashboard&lt;/a&gt; is a &lt;a href=&#34;https://shiny.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shiny&lt;/a&gt; dashboard built with the &lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;flexdashboard&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Treating Covid-19 - When enthusiasm trumps evidence</title>
      <link>https://www.martinfrigaard.io/publication/ojo-publico-covid-2020/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/publication/ojo-publico-covid-2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Analytic Literacy for the 21st Century</title>
      <link>https://www.martinfrigaard.io/talk/analytic-literacy-for-the-21st-century/</link>
      <pubDate>Fri, 19 Apr 2019 13:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/talk/analytic-literacy-for-the-21st-century/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://www.martinfrigaard.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blood Glucose Monitoring System Surveillance Program</title>
      <link>https://www.martinfrigaard.io/project/bgm-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/project/bgm-project/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://www.diabetestechnology.org/seg.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BGM/SEG Shiny App&lt;/a&gt; was initially part of the Diabetes Technology Society&amp;rsquo;s Blood Glucose Monitor Surveillance Program (see original research &lt;a href=&#34;https://journals.sagepub.com/doi/full/10.1177/1932296814539589&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://journals.sagepub.com/doi/full/10.1177/1932296814539590&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). I helped the authors of that study convert the findings in their paper to a shiny app.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
