<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>workflow | Martin Frigaard</title>
    <link>https://www.martinfrigaard.io/category/workflow/</link>
      <atom:link href="https://www.martinfrigaard.io/category/workflow/index.xml" rel="self" type="application/rss+xml" />
    <description>workflow</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 02 May 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.martinfrigaard.io/images/icon_hu3d9b8ff6daa3b348146f397d19f29135_559448_512x512_fill_lanczos_center_2.png</url>
      <title>workflow</title>
      <link>https://www.martinfrigaard.io/category/workflow/</link>
    </image>
    
    <item>
      <title>How to manage your files with fs</title>
      <link>https://www.martinfrigaard.io/post/how-to-manage-your-files-with-fs/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      <guid>https://www.martinfrigaard.io/post/how-to-manage-your-files-with-fs/</guid>
      <description>&lt;p&gt;Organizing your data, code, documents, and figures in a consistent way that&amp;rsquo;s easy to navigate is one of the most thoughtful and generous things you&amp;rsquo;ll ever do. It&amp;rsquo;s also a basic requirement for a reproducible data science project. In RStudio, this process is made easier with &lt;code&gt;.Rproj&lt;/code&gt; files (&lt;a href=&#34;https://www.tidyverse.org/blog/2017/12/workflow-vs-script/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;read more&lt;/a&gt;) and the &lt;a href=&#34;https://github.com/jennybc/here_here&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;here&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-fs-does&#34;&gt;What &lt;code&gt;fs&lt;/code&gt; does?&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/fs/readme/README.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;fs&lt;/code&gt; package&lt;/a&gt; adds another layer of project organization by giving us access to a &amp;ldquo;&lt;em&gt;uniform interface to file system operations.&lt;/em&gt;&amp;rdquo; Many of the &lt;code&gt;fs&lt;/code&gt; functions aren&amp;rsquo;t new, but they now have consistent names (&lt;code&gt;path_&lt;/code&gt;, &lt;code&gt;file_&lt;/code&gt;, &lt;code&gt;dir_&lt;/code&gt;, and &lt;code&gt;link_&lt;/code&gt;) and return tidy paths (using &lt;code&gt;/&lt;/code&gt; and not &lt;code&gt;//&lt;/code&gt; or trailing &lt;code&gt;/&lt;/code&gt;). Windows users have likely experienced the bane of collaborating with Unix users (and vice versa) because of the &lt;a href=&#34;https://www.howtogeek.com/181774/why-windows-uses-backslashes-and-everything-else-uses-forward-slashes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;difference in file paths&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-fs-works&#34;&gt;How &lt;code&gt;fs&lt;/code&gt; works&lt;/h2&gt;
&lt;p&gt;We will be using &lt;a href=&#34;https://github.com/hadley/nycflights13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&amp;rsquo;s &lt;code&gt;nycflights13&lt;/code&gt; package&lt;/a&gt; as an example project to demonstrate some of the features of &lt;code&gt;fs&lt;/code&gt;. First we&amp;rsquo;ll get a &amp;lsquo;big picture&amp;rsquo; view of the project folder and it&amp;rsquo;s contents using &lt;code&gt;fs::dir_tree()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(&amp;quot;nycflights13&amp;quot;)
## nycflights13
## ├── DESCRIPTION
## ├── NAMESPACE
## ├── NEWS.md
## ├── R
## │   ├── airlines.R
## │   ├── airport.R
## │   ├── flights.R
## │   ├── planes.R
## │   └── weather.R
## ├── README.md
## ├── cran-comments.md
## ├── data
## │   ├── airlines.rda
## │   ├── airports.rda
## │   ├── flights.rda
## │   ├── planes.rda
## │   └── weather.rda
## ├── data-raw
## │   ├── airlines.R
## │   ├── airlines.csv
## │   ├── airports.R
## │   ├── airports.csv
## │   ├── airports.dat
## │   ├── airports.svg
## │   ├── flights.R
## │   ├── planes.R
## │   ├── planes.csv
## │   ├── weather.R
## │   └── weather.csv
## ├── man
## │   ├── airlines.Rd
## │   ├── airports.Rd
## │   ├── flights.Rd
## │   ├── planes.Rd
## │   └── weather.Rd
## ├── nycflights.Rproj
## └── revdep
##     ├── README.md
##     ├── email.yml
##     └── problems.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dir_tree()&lt;/code&gt; is similar to the &lt;a href=&#34;https://www.geeksforgeeks.org/tree-command-unixlinux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tree&lt;/code&gt; command in Linux&lt;/a&gt;. If we want to narrow the scope of the tree, we can specify a subfolder and use the &lt;code&gt;regexp&lt;/code&gt; or &lt;code&gt;glob&lt;/code&gt; arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(path = &amp;quot;nycflights13/data-raw&amp;quot;, regexp = &amp;quot;[.]csv$&amp;quot;)
## nycflights13/data-raw
## ├── airlines.csv
## ├── airports.csv
## ├── planes.csv
## └── weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; does more than just print folder contents to the screen. We can also construct clean file paths with &lt;code&gt;fs::path()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create path to raw data 
raw_data_path &amp;lt;- fs::path(&amp;quot;nycflights13&amp;quot;, &amp;quot;data-raw&amp;quot;)
# view these files in the OS
fs::file_show(raw_data_path)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;images/file_show.png&#34; alt=&#34;&#34; width=&#34;80%&#34; height=&#34;80%&#34;/&gt;
&lt;h2 id=&#34;creating-folders-and-files-with-less-worry&#34;&gt;Creating folders and files (with less worry)&lt;/h2&gt;
&lt;p&gt;I have a tendency to create &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt; folders frequently. The &lt;code&gt;fs::dir_create()&lt;/code&gt; and &lt;code&gt;fs::file_create()&lt;/code&gt; functions are great because they don&amp;rsquo;t overwrite my existing folders or files (no need for &lt;code&gt;if(!file.exists(&amp;quot;data))&lt;/code&gt; statements anymore!).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# assume I already have a data-csv folder and data-csv/README.md file
fs::dir_tree(&amp;quot;data-csv&amp;quot;)
# what is in this file?
base::system(command = &amp;quot;cat &#39;data-csv/README.md&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# data-csv
# └── README.md
# CSV Data Files
# ==============
# 
# PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\/––√\/––•––•––√\/––√\/––•––•
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously some files should not be overwritten or altered after they&amp;rsquo;ve been created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# will we overwrite this? try to create new data folder
fs::dir_create(&amp;quot;data-csv&amp;quot;)
# and try to create new README.md file
fs::file_create(&amp;quot;data-csv/README.md&amp;quot;)
# check their contents 
base::system(command = &amp;quot;cat &#39;data-csv/README.md&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# CSV Data Files
# ==============
# 
# PLEASE!!! ‹(•_•)› NEVER CHANGE ME! ––•––√\/––√\/––•––•––√\/––√\/––•––•
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that&amp;rsquo;s good news.&lt;/p&gt;
&lt;h3 id=&#34;directoryfile-info-in-tibbles&#34;&gt;Directory/file info in tibbles!&lt;/h3&gt;
&lt;p&gt;The best part of &lt;code&gt;fs&lt;/code&gt; is that we can store all this meta data from a project repo and manipulate it just like any &lt;code&gt;tibble&lt;/code&gt; in &lt;code&gt;tidyverse&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# store directory inforamtion in NycF13DirInfo
NycF13DirInfo &amp;lt;- fs::dir_info(&amp;quot;nycflights13&amp;quot;, recurse = TRUE)
NycF13DirInfo %&amp;gt;% 
  # check the files only
  dplyr::filter(type == &amp;quot;file&amp;quot;) %&amp;gt;% 
  # that are biggest 
  dplyr::arrange(desc(size)) %&amp;gt;% 
  # only view size, birth time, and change time
  dplyr::select(path, size, birth_time, change_time) %&amp;gt;% 
  # return top 5
  utils::head(5)
##                                 path    size          birth_time
## 1      nycflights13/data/flights.rda    4.1M 2019-09-16 10:29:09
## 2  nycflights13/data-raw/weather.csv   2.19M 2019-09-16 10:29:09
## 3 nycflights13/data-raw/airports.dat 830.38K 2019-09-16 10:29:09
## 4   nycflights13/data-raw/planes.csv  241.4K 2019-09-16 10:29:09
## 5 nycflights13/data-raw/airports.svg 226.37K 2019-09-16 10:29:09
##           change_time
## 1 2020-05-29 11:37:44
## 2 2020-05-29 11:37:44
## 3 2020-05-29 11:37:44
## 4 2020-05-29 11:37:44
## 5 2020-05-29 11:37:44
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can come in handy if you&amp;rsquo;re looking for the last time you modified a file, or if you&amp;rsquo;re looking for a particularly large/small file.&lt;/p&gt;
&lt;h2 id=&#34;moving-and-copying-files&#34;&gt;Moving and copying files&lt;/h2&gt;
&lt;p&gt;We can also easily copy files from one location to another. Below we move all the &lt;code&gt;.csv&lt;/code&gt; files from &lt;code&gt;data-raw&lt;/code&gt; into the parent &lt;code&gt;data&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;NycF13DirInfo %&amp;gt;% 
  # find all .csv files 
  dplyr::filter(stringr::str_detect(string = path, pattern = &amp;quot;.csv&amp;quot;)) %&amp;gt;% 
  # move them into the parent data/ folder
  fs::file_copy(path = .$path, new_path =  fs::path(&amp;quot;data-csv&amp;quot;))
# sanity check
fs::dir_tree(&amp;quot;data-csv&amp;quot;)
## data-csv
## ├── README.md
## ├── airlines.csv
## ├── airports.csv
## ├── planes.csv
## └── weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we&amp;rsquo;d like to read all of these files into one big data frame? We can create an &lt;code&gt;fs_path&lt;/code&gt; which is a named character vector (with some additional coloring on capable terminals).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# csv files
csv_files &amp;lt;- fs::dir_ls(path = &amp;quot;data-csv&amp;quot;, glob = &amp;quot;*.csv&amp;quot;)
utils::str(csv_files)
##  &#39;fs_path&#39; Named chr [1:4] &amp;quot;data-csv/airlines.csv&amp;quot; &amp;quot;data-csv/airports.csv&amp;quot; ...
##  - attr(*, &amp;quot;names&amp;quot;)= chr [1:4] &amp;quot;data-csv/airlines.csv&amp;quot; &amp;quot;data-csv/airports.csv&amp;quot; &amp;quot;data-csv/planes.csv&amp;quot; &amp;quot;data-csv/weather.csv&amp;quot;
base::class(csv_files)
## [1] &amp;quot;fs_path&amp;quot;   &amp;quot;character&amp;quot;
base::is.character(csv_files)
## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now pass this to &lt;code&gt;purrr::map_df()&lt;/code&gt; and get all the .csv files in a huge dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;AllNycFlights &amp;lt;- csv_files %&amp;gt;%
  purrr::map_df(.f = read_csv, .id = &amp;quot;file&amp;quot;, col_types = cols()) 
AllNycFlights %&amp;gt;% glimpse()
## Rows: 30,911
## Columns: 33
## $ file         &amp;lt;chr&amp;gt; &amp;quot;data-csv/airlines.csv&amp;quot;, &amp;quot;data-csv/airlines.csv&amp;quot;, &amp;quot;data-…
## $ carrier      &amp;lt;chr&amp;gt; &amp;quot;9E&amp;quot;, &amp;quot;AA&amp;quot;, &amp;quot;AS&amp;quot;, &amp;quot;B6&amp;quot;, &amp;quot;DL&amp;quot;, &amp;quot;EV&amp;quot;, &amp;quot;F9&amp;quot;, &amp;quot;FL&amp;quot;, &amp;quot;HA&amp;quot;, &amp;quot;M…
## $ name         &amp;lt;chr&amp;gt; &amp;quot;Endeavor Air Inc.&amp;quot;, &amp;quot;American Airlines Inc.&amp;quot;, &amp;quot;Alaska A…
## $ faa          &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ lat          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ lon          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ alt          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tz           &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ dst          &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tzone        &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ tailnum      &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ year         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ type         &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ manufacturer &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ model        &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ engines      &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ seats        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ speed        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ engine       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ origin       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ month        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ day          &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ hour         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ temp         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ dewp         &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ humid        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_dir     &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_speed   &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ wind_gust    &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ precip       &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ pressure     &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ visib        &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …
## $ time_hour    &amp;lt;dttm&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yikes! Crazy huh? Well, this isn&amp;rsquo;t very practical to work with, but we could use &lt;code&gt;dplyr::filter()&lt;/code&gt; to get the datasets we needed.&lt;/p&gt;
&lt;p&gt;The different values for &lt;code&gt;file&lt;/code&gt; should correspond to the number of observations in each dataset in the &lt;code&gt;nycflights13&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# are these the number of observations per dataset?
AllNycFlights %&amp;gt;% dplyr::count(file, sort = TRUE)
## # A tibble: 4 x 2
##   file                      n
##   &amp;lt;chr&amp;gt;                 &amp;lt;int&amp;gt;
## 1 data-csv/weather.csv  26115
## 2 data-csv/planes.csv    3322
## 3 data-csv/airports.csv  1458
## 4 data-csv/airlines.csv    16
# sanity check 
nycflights13::weather %&amp;gt;% base::nrow()
## [1] 26115
# yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;works-well-with-purrr-package&#34;&gt;Works well with &lt;code&gt;purrr&lt;/code&gt; package!&lt;/h2&gt;
&lt;p&gt;Ok, let&amp;rsquo;s time-stamp these files and export them into a &lt;code&gt;today-csv&lt;/code&gt; folder fun!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create today-csv folder
fs::dir_create(&amp;quot;today-csv&amp;quot;)
# create path
today_csv_path &amp;lt;- fs::path(&amp;quot;today-csv/&amp;quot;, base::noquote(lubridate::today()), &amp;quot;/&amp;quot;)
# remove previous path from file
AllNycFlights %&amp;gt;%
  dplyr::mutate(file = stringr::str_remove_all(string = file, 
                                               pattern = &amp;quot;data-csv/&amp;quot;)) %&amp;gt;% 
  # group by file
  dplyr::group_by(file) %&amp;gt;% 
  # keep only distinct rows (probably redundant)
  dplyr::group_map(~ dplyr::distinct(.x, .keep_all=TRUE), keep = TRUE) %&amp;gt;%
  purrr::walk(~.x %&amp;gt;% 
                 readr::write_csv(path = paste0(today_csv_path, 
                                         &amp;quot;_&amp;quot;,
                                         unique(.x$file))))
# sanity check!
fs::dir_tree(&amp;quot;today-csv&amp;quot;)
## today-csv
## ├── 2020-05-29_airlines.csv
## ├── 2020-05-29_airports.csv
## ├── 2020-05-29_planes.csv
## └── 2020-05-29_weather.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the vignette and package site for more information!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
